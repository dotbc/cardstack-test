'use strict';

var _ = require('./');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('array chunks', function () {

  var chunks = void 0;
  var a1 = [1, 2, 3, 4, 5];

  it('split', function () {
    chunks = (0, _.split)(a1, 2);

    expect(chunks[0]).toEqual([1, 2]);
    expect(chunks[1]).toEqual([3, 4]);
    expect(chunks[2]).toEqual([5]);
  });
});

describe('promise concurrency', function () {

  it('concurrency', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var result, promises, resolved;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            result = [];
            promises = new Array(10).fill().map(function (v, i) {
              return function () {
                result.push(i);
                return Promise.resolve(i);
              };
            });
            _context.next = 4;
            return (0, _.promiseAll)(promises, 3);

          case 4:
            resolved = _context.sent;


            expect(resolved).toEqual(result);

          case 6:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));
});
//# sourceMappingURL=index.test.js.map