'use strict';

var _ = require('./');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

var wrapped = data.map(function (i) {

  return function () {
    // Here your promise
    return Promise.resolve(i);
  };
})(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined);
}))
//console.log(wrapped)
//const result = await promiseAll(wrapped, 3)
//console.log(result)
)();
//# sourceMappingURL=index.example.js.map